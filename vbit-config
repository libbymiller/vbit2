#!/bin/bash

SCRIPTDIR=`dirname "$(readlink -f "$0")"`
KNOWN="$SCRIPTDIR/known_services"
SERVICESDIR="$HOME/.teletext-services"
CONFIG="$SERVICESDIR/config"

DIALOG_OK=0
DIALOG_CANCEL=1
DIALOG_ESC=255

PROGTITLE="VBIT2 Config"

display_message() {
  if [ ! -z "$1" ]; then
    dialog --backtitle "$PROGTITLE" \
      --title "$1" \
      --msgbox "$2" 0 0
  else
    dialog --backtitle "$PROGTITLE" \
      --msgbox "$2" 0 0
  fi
}

install_service(){
  import_config

  SERVICES=()
  PROTOCOLS=()
  URLS=()
  DIRPATH=()
  DEPENDS=()
  for i in ${!SERVICEDATA[@]}; do
    IFS=',' read -r -a SERVICE <<< "${SERVICEDATA[i]}"

    # don't add installed services to list
    if [[ " ${INSTALLEDSERVICES[@]} " =~ " ${SERVICE[0]} " ]]; then
      continue
    fi

    # don't add service to list if another service is installed in the directory
    if [[ " ${INSTALLEDDIRS[@]} " =~ " $SERVICESDIR/${SERVICE[3]} " ]]; then
      continue
    fi

    # does it have a dependency?
    if [ ! -z "${SERVICE[4]}" ]; then
      # is the dependency installed?
      if [[ ! " ${INSTALLEDSERVICES[@]} " =~ " ${SERVICE[4]} " ]]; then
        continue
      fi
      DEPENDS+=("${SERVICE[4]}")
    else
      DEPENDS+=("")
    fi

    SERVICES+=("${SERVICE[0]}")
    PROTOCOLS+=("${SERVICE[1]}")
    URLS+=($(printf "%s\n" "${SERVICE[2]}" | sed 's/ /%20/g'))
    DIRPATH+=("${SERVICE[3]}")
  done

  CHOICES=()
  for i in ${!SERVICES[@]}; do
    CHOICES+=("$i" "${SERVICES[i]}")
  done

  exec 3>&1
  selection=$(dialog \
    --backtitle "$PROGTITLE" \
    --cancel-button "Back" \
    --title "Install" \
    --menu "Choose new service to install" 0 0 6 \
    "${CHOICES[@]}" \
    "C" "Custom" \
    2>&1 1>&3)
  exit_status=$?
  exec 3>&-

  case $exit_status in
    $DIALOG_CANCEL)
      return
      ;;
    $DIALOG_ESC)
      return
      ;;
  esac

  if [ "$selection" = "C" ]; then
    custom_menu
    if [ $? -ne 0 ]; then
      return 1
    fi
  else
    INSSERVICE="${SERVICES[$selection]}"
    INSDIR="$SERVICESDIR/${DIRPATH[$selection]}"
    INSPROTOCOL="${PROTOCOLS[$selection]}"
    INSDEPEND="${DEPENDS[$selection]}"
    INSURL="${URLS[$selection]}"
  fi

  if [ -d "INSDIR" ] && [ ! "$INSPROTOCOL" = "dir" ] }; then
    display_message "Installing service failed" "Directory already exists"
    return
  fi

  case $INSPROTOCOL in
    "svn")
      clear
      svn checkout $INSURL $INSDIR
      err=$?
      if test $err -ne 0; then
        display_message "error" "svn checkout failed with error $err"
        return
      fi
      clear
      INSTALLED+=("$INSSERVICE,$INSDIR,$INSDEPEND,svn")

      if [[ $SELECTED == "" ]]; then SELECTED="$INSSERVICE"; fi
      write_config
      ;;
    "git")
      clear
      git clone --depth 1 $INSURL $INSDIR
      err=$?
      if test $err -ne 0; then
        display_message "error" "git clone failed with error $err"
        return
      fi
      clear
      INSTALLED+=("$INSSERVICE,$INSDIR,$INSDEPEND,git")
      if [[ $SELECTED == "" ]]; then SELECTED="$INSSERVICE"; fi
      write_config
      ;;
    "dir")
      clear
      # vbit2's dir may not exist at this point
      if [ ! -d "$SERVICESDIR" ]; then
        mkdir -p "$SERVICESDIR"
      fi
      cp -r $INSURL $INSDIR
      err=$?
      if test $err -ne 0; then
        display_message "error" "dir $err no dir $INSURL"
        display_message "error" "install memories repo first"
        return
      fi
      clear
      INSTALLED+=("$INSSERVICE,$INSDIR,$INSDEPEND,dir")
      if [[ $SELECTED == "" ]]; then SELECTED="$INSSERVICE"; fi
      write_config
      ;;
  esac
}

custom_menu(){
  while true; do
    exec 3>&1
    selection=$(dialog \
      --backtitle "$PROGTITLE" \
      --title "Custom service" \
      --menu "Select type" 0 0 3 \
      "S" "svn repo" \
      "G" "git repo" \
      "D" "directory" \
      2>&1 1>&3)
    exit_status=$?
    exec 3>&-

    case $exit_status in
      $DIALOG_CANCEL)
        return 1
        ;;
      $DIALOG_ESC)
        return 1
        ;;
    esac

    case $selection in
      "G")
        custom_input_url
        if [ $? -eq 0 ]; then
          INSPROTOCOL="git"
          return 0
        fi
        ;;
      "S")
        custom_input_url
        if [ $? -eq 0 ]; then
          INSPROTOCOL="svn"
          return 0
        fi
        ;;
      "D")
        display_message "Error" "Not implemented yet"
        return 1
        ;;
    esac
  done
}

custom_input_url(){
  urlstring=""
  while true; do
    exec 3>&1
    urlstring=$(dialog \
      --backtitle "$PROGTITLE" \
      --cancel-button "Back" \
      --title "Custom service" \
      --inputbox "Enter URL" 0 0 "$urlstring" \
      2>&1 1>&3)
    exit_status=$?
    exec 3>&-

    case $exit_status in
      $DIALOG_CANCEL)
        return 1
        ;;
      $DIALOG_ESC)
        return 1
        ;;
    esac

    if [[ -z "$urlstring" ]]; then
      continue
    fi

    urlstring=$( printf "%s\n" "$urlstring" | sed 's/ /%20/g' ) # urlencode spaces

    custom_input_service

    if [ $? -eq 0 ]; then
      INSURL="$urlstring"
      return 0
    fi
  done
}

custom_input_service(){
  servicestring=""
  while true; do
    exec 3>&1
    servicestring=$(dialog \
      --backtitle "$PROGTITLE" \
      --cancel-button "Back" \
      --title "Custom service" \
      --inputbox "Enter name for service" 0 0 "$servicestring" \
      2>&1 1>&3)
    exit_status=$?
    exec 3>&-

    case $exit_status in
      $DIALOG_CANCEL)
        return 1
        ;;
      $DIALOG_ESC)
        return 1
        ;;
    esac

    if [[ -z "$servicestring" ]]; then
      continue
    fi

    if [[ "$servicestring" =~ [\\/.,\"@\`\$] ]]; then
      display_message "error" "The following characters may not be used: \\/.,\"@\`\$"
      continue
    fi

    if [[ " ${SERVICES[@]} " =~ " $servicestring " ]] || [[ " ${INSTALLEDSERVICES[@]} " =~ " $servicestring " ]]; then
      # Name is taken by a known service or installed service
      display_message "error" "Service name is already used"
    else
      dialog --backtitle "$PROGTITLE" \
      --title "Custom service" \
      --yes-label "Main" \
      --no-label "Ancillary" \
      --yesno "Is this a main or ancillary service?" 0 0

      case $? in
        $DIALOG_OK)
          # main service
          INSSERVICE="$servicestring"
          INSDEPEND=""
          INSDIR="$SERVICESDIR/$servicestring"
          return 0
          ;;
        $DIALOG_CANCEL)
          # ancillary
          display_message "Error" "Not implemented yet"
          ;;
        $DIALOG_ESC)
          return 1
          ;;
      esac
    fi
  done
}

import_config(){
  if test -f "$KNOWN"; then
    source $KNOWN
  else
    echo $KNOWN missing
    exit
  fi

  IFS=$'\n' SERVICEDATA=($(sort -t , -k 1,1 <<<"${SERVICEDATA[*]}"))

  if test -f "$CONFIG"; then
    source $CONFIG
  else
    SELECTED=""
  fi

  IFS=$'\n' INSTALLED=($(sort -t , -k 1,1 <<<"${INSTALLED[*]}"))

  INSTALLEDSERVICES=()
  INSTALLEDDIRS=()
  for i in ${!INSTALLED[@]}; do
    IFS=',' read -r -a INSTALLEDARRAY <<< "${INSTALLED[i]}"
    INSTALLEDSERVICES+=("${INSTALLEDARRAY[0]}")
    INSTALLEDDIRS+=("${INSTALLEDARRAY[1]}")
  done
}

uninstall_service(){
  import_config

  CHOICES=()
  for i in ${!INSTALLEDSERVICES[@]}; do
    CHOICES+=("$i" "${INSTALLEDSERVICES[i]}")
  done

  exec 3>&1
  selection=$(dialog \
    --backtitle "$PROGTITLE" \
    --cancel-button "Back" \
    --title "Uninstall" \
    --menu "Choose service to uninstall" 0 0 4 \
    "${CHOICES[@]}" \
    2>&1 1>&3)
  exit_status=$?
  exec 3>&-

  case $exit_status in
    $DIALOG_CANCEL)
      return
      ;;
    $DIALOG_ESC)
      return
      ;;
  esac

  SERVICES=()
  get_services "${INSTALLEDSERVICES[$selection]}"

  if [[ "${INSTALLEDSERVICES[$selection]}" == "$SELECTED" ]]; then
    SELECTED=""
    write_config
    systemctl --user stop vbit2.service
  fi

  for i in ${!SERVICES[@]}; do
    IFS=',' read -r -a SERVICEARRAY <<< "${SERVICES[i]}"
    #if [[ ! "${SERVICEARRAY[3]}" == "dir" ]]; then
      # remove unless type is dir for custom services
    rm -rf "${SERVICEARRAY[1]}"
    #fi
    escaped=$(sed 's/[^^]/[&]/g; s/\^/\\^/g' <<<"${SERVICEARRAY[0]}")
    sed -i "/^  \"$escaped,/d" "$CONFIG"
  done
}

get_services(){
  # find all services and sub-services matching string in first argument
  for i in ${!INSTALLED[@]}; do
    IFS=',' read -r -a INSTALLEDARRAY <<< "${INSTALLED[i]}"
    if [[ "${INSTALLEDARRAY[0]}" == "$1" ]]; then
      # the service itself
      SERVICES+=("${INSTALLED[i]}")
    fi
    if [[ "${INSTALLEDARRAY[2]}" == "$1" ]]; then
      # recurse down into any sub-services
      get_services "${INSTALLEDARRAY[0]}"
    fi
  done
}

select_service(){
  import_config

  SERVICES=()
  DIRPATH=()
  for i in ${!INSTALLEDSERVICES[@]}; do
    IFS=',' read -r -a ins <<< "${INSTALLED[i]}"
    # only add non ancillary services
    if [[ "${ins[2]}" == "" ]]; then
      SERVICES+=("${ins[0]}")
    fi
  done

  CHOICES=()
  for i in ${!SERVICES[@]}; do
    CHOICES+=("$i" "${SERVICES[i]}")
  done

  exec 3>&1
  selection=$(dialog \
    --backtitle "$PROGTITLE" \
    --cancel-button "Back" \
    --title "Select" \
    --menu "Choose service to generate" 0 0 6 \
    "${CHOICES[@]}" \
    2>&1 1>&3)
  exit_status=$?
  exec 3>&-

  case $exit_status in
    $DIALOG_CANCEL)
      return
      ;;
    $DIALOG_ESC)

      return
      ;;
  esac

  SELECTED="${SERVICES[$selection]}"
  write_config
  if systemctl --user is-active vbit2 >/dev/null 2>&1; then
    # service is running so restart it
    systemctl --user restart vbit2
  fi
  systemctl --user start teletext-update.service &
  display_message "" "${SERVICES[$selection]} selected"
  return
}

options_menu(){
  import_config

  was=""
  OPTIONS=("U" "Update services") 
  if [[ `systemctl --user is-enabled teletext-update.timer` == "enabled" ]]; then
    OPTIONS+=("on")
    was+="\"U\" "
  else
    OPTIONS+=("off")
  fi
  OPTIONS+=("B" "Run vbit2 at boot")
  if [[ `systemctl --user is-enabled vbit2.service` == "enabled" ]]; then
    OPTIONS+=("on")
    was+="\"B\" "
  else
    OPTIONS+=("off")
  fi

  exec 3>&1
  selection=$(dialog \
    --backtitle "$PROGTITLE" \
    --title "Options" \
    --nocancel \
    --notags \
    --checklist "" 0 0 4 \
    "${OPTIONS[@]}" \
  2>&1 1>&3)
  exit_status=$?
  exec 3>&-

  case $exit_status in
    $DIALOG_CANCEL)
      return
      ;;
    $DIALOG_ESC)
      return
      ;;
  esac

  if [[ "${selection[@]}" =~ "B" ]] && [[ ! "${was[@]}" =~ "B" ]]; then
    # boot option is set but wasn't before
    systemctl --user enable vbit2.service
  elif [[ ! "${selection[@]}" =~ "B" ]] && [[ "${was[@]}" =~ "B" ]]; then
    # boot option isn't set but was before
    systemctl --user disable vbit2.service
  fi

  if [[ "${selection[@]}" =~ "U" ]] && [[ ! "${was[@]}" =~ "U" ]]; then
    # update option is set but wasn't before
    systemctl --user enable teletext-update.timer --now
  elif [[ ! "${selection[@]}" =~ "U" ]] && [[ "${was[@]}" =~ "U" ]]; then
    # update option isn't set but was before
    systemctl --user disable teletext-update.timer --now
  fi

  clear
}

main_menu(){
  while true; do
    import_config
    OPTIONS=("I" "Install service")

    if [ ${#INSTALLEDSERVICES[@]} -gt 0 ]; then
      OPTIONS+=("S" "Select service" "R" "Remove service" "O" "Options" "U" "Update VBIT2")

      if [[ `systemctl --user is-active vbit2.service` == "active" ]]; then
        OPTIONS+=("V" "Stop VBIT2")
        command="stop"
      else
        OPTIONS+=("V" "Start VBIT2")
        command="start"
      fi
    fi

    exec 3>&1
    selection=$(dialog \
      --backtitle "$PROGTITLE" \
      --cancel-button "Exit" \
      --title "Main menu" \
      --menu "" 0 0 6 \
      "${OPTIONS[@]}" \
      2>&1 1>&3)
    exit_status=$?
    exec 3>&-

    case $exit_status in
      $DIALOG_CANCEL)
        clear
        exit
        ;;
      $DIALOG_ESC)
        clear
        exit
        ;;
    esac

    case $selection in
      "S")
        select_service
        continue
        ;;
      "I")
        install_service
        continue
        ;;
      "R")
        uninstall_service
        continue
        ;;
      "O")
        options_menu
        continue
        ;;
      "V")
        systemctl --user $command vbit2.service
        continue
        ;;
      "U")
        clear
        $SCRIPTDIR/update.sh
        exit
        ;;
    esac
  done
}

write_config(){
  if [ ! -d "$SERVICESDIR" ]; then
    mkdir -p "$SERVICESDIR"
  fi

  if [ ! -f "$SERVICESDIR/IMPORTANT" ]; then
    printf "IMPORTANT:\nThese directories were created by vbit-config.\nIf a service is uninstalled the directory will be deleted." > "$SERVICESDIR/IMPORTANT"
  fi

  printf "#!/bin/bash\n# This file was created automatically by vbit-config.\nINSTALLED=(\n" > "$CONFIG"
  for i in ${!INSTALLED[@]}; do
    printf "%s\n" "  \"${INSTALLED[i]}\"" >> "$CONFIG"
  done
  printf ")\n\n" >> "$CONFIG"
  printf "%s\n" "SELECTED=\"$SELECTED\"" >> "$CONFIG"
}

clear
main_menu

